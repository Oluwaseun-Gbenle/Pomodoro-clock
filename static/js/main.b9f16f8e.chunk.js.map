{"version":3,"sources":["components/pomodoro.jsx","serviceWorker.js","index.js"],"names":["Controls","id","onClick","this","props","startCountDown","className","reset","React","Component","Timer","min","Math","floor","minutes","sec","time","warning","color","mode","style","Scale","sessionIncrement","sessionCounter","sessionDecrement","breakIncrement","breakCounter","breakDecrement","App","state","start","intervalId","bind","timerDisplay","add","setState","minus","setInterval","clearInterval","prevProps","playAudio","document","getElementById","play","aud","pause","currentTime","stopAudio","onChange","src","type","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9f16f8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './pomodoro.css';\r\n\r\nclass Controls extends React.Component { \r\n      \r\n      render () {\r\n    return(\r\n     <div id=\"control-3\">\r\n        <button id=\"start_stop\" onClick={this.props.startCountDown} >Start<i className=\"fa fa-play\"></i>/Stop<i className=\"fa fa-stop\"></i></button>\r\n          <button onClick={this.props.reset} id=\"reset\">Reset<i className=\"fa fa-refresh\"></i></button>\r\n        </div>\r\n    )\r\n      }\r\n      \r\n    }\r\n    \r\n    class Timer extends React.Component {\r\n      \r\n      render () {\r\n         let min = Math.floor(\r\n          (this.props.minutes / 60)\r\n        );\r\n         let sec = this.props.minutes % 60;\r\n        let time = \"\" + (min >= 10 ? min : \"0\" + min) + \":\" + (sec >= 10 ? sec : \"0\" + sec);\r\n        \r\n      let warning = this.props.minutes < 60? {color: '#8b0000'} : {color : '#010c37'};\r\n        return(\r\n          <div id=\"timer\">\r\n        \r\n    <div  id=\"timer-label\" >\r\n      {this.props.mode}\r\n      </div>\r\n      \r\n    <div style={warning} id=\"time-left\" >\r\n     {time}\r\n      </div>\r\n            </div>\r\n       )\r\n      }\r\n    }\r\n    \r\n    \r\n    class Scale extends React.Component { \r\n      \r\n      render() {\r\n       return(\r\n         <div id=\"top\">\r\n          <div id=\"session-container\">\r\n           \r\n               <p id=\"session-label\">\r\n      Session Length\r\n      </p>\r\n           \r\n        <div  id=\"control-1\">\r\n        <button onClick={this.props.sessionIncrement} id=\"session-increment\">\r\n         <p className=\"sign\"> + </p>\r\n      </button>\r\n          \r\n      <p id=\"session-length\"className=\"figure\">{this.props.sessionCounter}</p>\r\n          \r\n     <button  onClick={this.props.sessionDecrement} id=\"session-decrement\">\r\n         <p className=\"sign\"> - </p>\r\n      </button>\r\n        </div>\r\n         \r\n         </div>\r\n         \r\n         \r\n       <div id=\"break-container\">\r\n      \r\n    <p id=\"break-label\">\r\n      Break Length\r\n      </p>  \r\n       \r\n        <div  id=\"control-2\">\r\n        \r\n     <button onClick={this.props.breakIncrement} id=\"break-increment\">\r\n        <p className=\"sign\"> + </p>\r\n      </button>\r\n      \r\n      <p  id=\"break-length\"  className=\"figure\">{this.props.breakCounter}</p>\r\n      \r\n     <button  onClick={this.props.breakDecrement} id=\"break-decrement\">\r\n       <p className=\"sign\"> - </p>\r\n        </button>\r\n        \r\n      </div>  \r\n         \r\n      </div>\r\n           \r\n           \r\n           </div>\r\n       ) \r\n      }\r\n    }\r\n      \r\n      \r\n     class App extends React.Component {\r\n     constructor(props)  {\r\n       super(props);\r\n     this.state = {\r\n         start:false,\r\n         sessionCounter: 25,\r\n         breakCounter: 5,\r\n         minutes: 1500,\r\n         mode: 'Session',\r\n       intervalId: \"\"\r\n       }\r\n       \r\n       this.reset = this.reset.bind(this);\r\n       this.startCountDown = this.startCountDown.bind(this);\r\n       this.timerDisplay = this.timerDisplay.bind(this);\r\n       this.sessionIncrement = this.sessionIncrement.bind(this);\r\n       this.breakIncrement = this.breakIncrement.bind(this);\r\n        this.sessionDecrement = this.sessionDecrement.bind(this);\r\n        this.breakDecrement = this.breakDecrement.bind(this);\r\n     }\r\n      sessionIncrement () {\r\n        let add = this.state.sessionCounter + 1\r\n          if(this.state.mode === 'Session') {\r\n            this.setState({\r\n           minutes: add * 60\r\n        });\r\n          }\r\n         if(this.state.sessionCounter < 60){\r\n         this.setState({\r\n       sessionCounter: \r\n           this.state.sessionCounter + 1 \r\n        });\r\n         }\r\n      }\r\n     \r\n       sessionDecrement () {\r\n          let minus = this.state.sessionCounter - 1;\r\n          if(this.state.mode === 'Session') {\r\n            this.setState({\r\n     minutes: minus * 60  \r\n        }); \r\n          }\r\n          if(this.state.sessionCounter > 1){\r\n          this.setState({\r\n     sessionCounter:\r\n      this.state.sessionCounter - 1 \r\n        });\r\n      }\r\n       }\r\n       \r\n       breakIncrement () {\r\n          let add = this.state.breakCounter + 1;\r\n          if(this.state.mode === 'Break') {\r\n            this.setState({\r\n      minutes: add * 60\r\n        });\r\n          }\r\n         if(this.state.breakCounter < 30){\r\n          this.setState({\r\n      breakCounter: this.state.breakCounter + 1\r\n        });\r\n      }\r\n       }\r\n       \r\n      breakDecrement () {\r\n         let minus = this.state.breakCounter + 1;\r\n          if(this.state.mode === 'Break') {\r\n             this.setState({\r\n     minutes: minus  * 60 \r\n        });\r\n          }\r\n         if(this.state.breakCounter > 1){\r\n         this.setState({\r\n     breakCounter: this.state.breakCounter - 1\r\n        });\r\n      } \r\n      \r\n      } \r\n       timerDisplay () {  \r\n     this.setState({\r\n          minutes: this.state.minutes-1\r\n        });\r\n    \r\n    }\r\n    \r\n       startCountDown () {\r\n           \r\n         if(this.state.start === false){\r\n          let intervalId = setInterval(this.timerDisplay, 1000);\r\n            this.setState({\r\n              intervalId: intervalId,\r\n              start: true\r\n            })\r\n        }else {\r\n          clearInterval(this.state.intervalId);\r\n          this.setState({\r\n            start: false\r\n          })\r\n          }\r\n          \r\n    \r\n       }\r\n       \r\n       \r\n       componentDidUpdate(prevProps) {\r\n         if (this.state.minutes === 0 && this.state.mode ==='Session') {\r\n           this.playAudio();\r\n           this.setState({\r\n           mode: 'Break',\r\n           minutes: this.state.breakCounter * 60\r\n           });\r\n         } else if (this.state.minutes === 0 && this.state.mode ==='Break') {\r\n            this.playAudio();\r\n    this.setState({\r\n           mode: 'Session',\r\n           minutes: this.state.sessionCounter * 60\r\n           });\r\n         }\r\n       }\r\n        playAudio () {\r\n        document.getElementById(\"beep\").play();\r\n      }\r\n       stopAudio () {\r\n        let aud = document.getElementById(\"beep\");\r\n        aud.pause(); \r\n        aud.currentTime = 0; \r\n      }\r\n    reset() {\r\n          clearInterval(this.state.intervalId);\r\n        this.stopAudio();\r\n         this.setState({\r\n           sessionCounter: 25,\r\n           minutes: 1500 ,\r\n           mode: 'Session',\r\n           start:false,\r\n           intervalId:\"\"\r\n         });\r\n        \r\n       }\r\n       \r\n       \r\n       \r\n      render() {\r\n       return(\r\n       <div id=\"outer-container\">\r\n          \r\n           <p id=\"title\"> Pomodoro Clock</p>\r\n           \r\n           <div id=\"inner-container\">\r\n             \r\n           <Scale sessionIncrement={this.sessionIncrement} \r\n             sessionDecrement={this.sessionDecrement}\r\n             breakIncrement=\r\n             {this.breakIncrement}\r\n             breakDecrement=\r\n             {this.breakDecrement}\r\n             sessionCounter={this.state.sessionCounter}\r\n             breakCounter={this.state.breakCounter}\r\n             />  \r\n           \r\n          <Timer\r\n            mode={this.state.mode}\r\n           minutes={this.state.minutes}\r\n           onChange={this.state.onChange}\r\n            />\r\n               \r\n            <Controls\r\n              startCountDown={this.startCountDown}\r\n              reset={this.reset}\r\n              />\r\n             \r\n             \r\n          <audio id=\"beep\">\r\n              <source src=\"https://res.cloudinary.com/dnruzhfx4/video/upload/v1537892874/sounds/KatchiDooWappi.wav\" type=\"audio/wav\" />\r\n            </audio>\r\n          \r\n             \r\n           </div>\r\n           </div>\r\n       ) \r\n      }\r\n    }\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/pomodoro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}